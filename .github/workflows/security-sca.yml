name: Security SCA Scan

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    env:
      REPORT_DIR: odc-reports

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java (for CycloneDX)
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Clean & prepare reports folder
        run: |
          echo "Cleaning old reports..."
          rm -rf $REPORT_DIR
          mkdir -p $REPORT_DIR

      - name: Generate SBOM (CycloneDX)
        run: |
          mvn org.cyclonedx:cyclonedx-maven-plugin:makeAggregateBom || echo "SBOM generation skipped"

      - name: Run OWASP Dependency-Check
        run: |
          docker run --rm \
            -v "${{ github.workspace }}":/src \
            -v "${{ github.workspace }}/$REPORT_DIR":/report \
            owasp/dependency-check:latest \
            --scan /src \
            --out /report \
            --format "HTML,JSON,XML" \
            --project "lab-cyclonedx-dependencycheck"

      - name: Verify reports exist
        run: |
          if [ ! -f "$REPORT_DIR/dependency-check-report.json" ]; then
            echo "ERROR: JSON report not found!"
            exit 12
          fi
          if [ ! -f "$REPORT_DIR/dependency-check-report.html" ]; then
            echo "ERROR: HTML report not found!"
            exit 12
          fi

      - name: Fail on High/Critical vulnerabilities
        run: |
          python3 - <<'PY'
          import json, sys, pathlib
          report_path = pathlib.Path("odc-reports/dependency-check-report.json")
          if not report_path.exists():
              print("JSON report missing, cannot scan for vulnerabilities")
              sys.exit(12)

          def maybe_cvss(vuln):
              try:
                  return float(vuln.get('cvssScore'))
              except:
                  try:
                      return float(vuln.get('cvss', {}).get('score', 0))
                  except:
                      return 0

          def iter_vulns(obj):
              if isinstance(obj, dict):
                  for k, v in obj.items():
                      if k == "vulnerabilities" and isinstance(v, list):
                          for vv in v:
                              yield vv
                      else:
                          yield from iter_vulns(v)
              elif isinstance(obj, list):
                  for item in obj:
                      yield from iter_vulns(item)

          data = json.loads(report_path.read_text())
          hits = []
          for vuln in iter_vulns(data):
              sev = (vuln.get('severity') or '').upper()
              cvss = maybe_cvss(vuln)
              if sev in ('HIGH', 'CRITICAL') or cvss >= 7.0:
                  hits.append((vuln.get('name'), sev, cvss))

          print(f"High/Critical vulnerabilities found: {len(hits)}")
          for h in hits[:20]:
              print(h)

          if hits:
              sys.exit(1)
          PY

      - name: Upload reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: $REPORT_DIR
